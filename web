--------------------
Login Authentication
--------------------
Vulnerable Code â†²
String user = request.getParameter("user");
String pass = request.getParameter("pass");
String query = "SELECT * FROM users WHERE username='" + user + "' AND password='" + pass + "'";
Statement stmt = connection.createStatement();
ResultSet rs = stmt.executeQuery(query);

ðŸ”´ Why is this dangerous â†°

If an attacker enters ' OR '1'='1, they can log in without a password.
Hackers can steal user data or escalate privileges.

âœ… Secure Code (Fixed) â†²

String query = "SELECT * FROM users WHERE username=? AND password=?";
PreparedStatement pstmt = connection.prepareStatement(query);
pstmt.setString(1, user);
pstmt.setString(2, pass);
ResultSet rs = pstmt.executeQuery();

Fix: Uses PreparedStatement to prevent SQL Injection.

----------------------
Searching for Products
----------------------
Vulnerable Code â†²

String search = request.getParameter("search");
String query = "SELECT * FROM products WHERE name LIKE '%" + search + "%'";
Statement stmt = connection.createStatement();
ResultSet rs = stmt.executeQuery(query);

ðŸ”´ Why is this dangerous?

If an attacker enters %'; DROP TABLE products;--, they can delete the entire products table.

âœ… Secure Code (Fixed)

String query = "SELECT * FROM products WHERE name LIKE ?";
PreparedStatement pstmt = connection.prepareStatement(query);
pstmt.setString(1, "%" + search + "%");
ResultSet rs = pstmt.executeQuery();

Fix: Uses ? to safely handle user input.




