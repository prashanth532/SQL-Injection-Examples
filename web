-----------------------------------------------------------
Login Form Bypass (Authentication Bypass)
-----------------------------------------------------------
 Vulnerable Code (PHP + MySQL)
-----------------------------------------------------------
<?php
$username = $_POST['username'];
$password = $_POST['password'];

$query = "SELECT * FROM users WHERE username = '$username' AND password = '$password'";
$result = mysqli_query($conn, $query);

if (mysqli_num_rows($result) > 0) {
    echo "Login successful!";
} else {
    echo "Invalid credentials!";
}
?>
-----------------------------------------------------------
Why is it wrong?
-----------------------------------------------------------
â€¢	Attacker enters ' OR '1'='1 in the username field:
â€¢	SELECT * FROM users WHERE username = '' OR '1'='1' AND password = ''
o	1=1 always evaluates to true, granting access without a valid password.
-----------------------------------------------------------
Fixed Code (Using Prepared Statements)
-----------------------------------------------------------
<?php
$stmt = $conn->prepare("SELECT * FROM users WHERE username = ? AND password = ?");
$stmt->bind_param("ss", $_POST['username'], $_POST['password']);
$stmt->execute();
$result = $stmt->get_result();

if ($result->num_rows > 0) {
    echo "Login successful!";
} else {
    echo "Invalid credentials!";
}
?>
-----------------------------------------------------------
Fix Explanation
-----------------------------------------------------------
â€¢	Uses parameterized queries (? placeholders) to prevent SQL injection.
-----------------------------------------------------------
Search Page SQL Injection (Error-Based Injection)
-----------------------------------------------------------
Vulnerable Code (Python + Flask + SQLite)
-----------------------------------------------------------
@app.route('/search')
def search():
    query = request.args.get('q')
    sql = f"SELECT * FROM products WHERE name LIKE '%{query}%'"
    result = db.execute(sql).fetchall()
    return jsonify(result)
-----------------------------------------------------------
Why is it wrong?
-----------------------------------------------------------
â€¢	Attacker can enter:
â€¢	' OR 1=1 --
o	Query becomes:
o	SELECT * FROM products WHERE name LIKE '%' OR 1=1 --%'
o	This returns all products.
-----------------------------------------------------------
Fixed Code (Using Parameterized Queries)
-----------------------------------------------------------
@app.route('/search')
def search():
    query = request.args.get('q')
    sql = "SELECT * FROM products WHERE name LIKE ?"
    result = db.execute(sql, ('%' + query + '%',)).fetchall()
    return jsonify(result)
-----------------------------------------------------------
Fix Explanation
-----------------------------------------------------------
â€¢	Uses prepared statements (?) to handle user input safely.
-----------------------------------------------------------
URL-Based SQL Injection
-----------------------------------------------------------
Vulnerable Code (Node.js + Express + MySQL)
-----------------------------------------------------------
app.get('/user/:id', async (req, res) => {
    let query = `SELECT * FROM users WHERE id = ${req.params.id}`;
    let result = await db.query(query);
    res.json(result);
});
-----------------------------------------------------------
Why is it wrong?
-----------------------------------------------------------
â€¢	Attacker can manipulate the URL:
â€¢	/user/1 OR 1=1
o	Query becomes:
o	SELECT * FROM users WHERE id = 1 OR 1=1
o	All user data is exposed.
-----------------------------------------------------------
Fixed Code (Using Parameterized Queries)
-----------------------------------------------------------
app.get('/user/:id', async (req, res) => {
    let query = `SELECT * FROM users WHERE id = ?`;
    let result = await db.query(query, [req.params.id]);
    res.json(result);
});
-----------------------------------------------------------
Fix Explanation
-----------------------------------------------------------
â€¢	Uses prepared statements to avoid direct SQL execution.
-----------------------------------------------------------
Admin Panel SQL Injection
-----------------------------------------------------------
Vulnerable Code (PHP + MySQL)
-----------------------------------------------------------
<?php
if (isset($_GET['id'])) {
    $id = $_GET['id'];
    $query = "SELECT * FROM admins WHERE id = $id";
    $result = mysqli_query($conn, $query);
    $admin = mysqli_fetch_assoc($result);
    
    echo "Admin Name: " . $admin['name'];
}
?>
-----------------------------------------------------------
Why is it wrong?
-----------------------------------------------------------
â€¢	Attacker enters:
â€¢	id=1 UNION SELECT username, password FROM users
o	Query becomes:
o	SELECT * FROM admins WHERE id = 1 UNION SELECT username, password FROM users
o	Leaks all usernames and passwords.
-----------------------------------------------------------
Fixed Code (Using Prepared Statements)
-----------------------------------------------------------
<?php
if (isset($_GET['id'])) {
    $stmt = $conn->prepare("SELECT * FROM admins WHERE id = ?");
    $stmt->bind_param("i", $_GET['id']);
    $stmt->execute();
    $result = $stmt->get_result();
    $admin = $result->fetch_assoc();
    
    echo "Admin Name: " . htmlspecialchars($admin['name']);
}
?>
-----------------------------------------------------------
Fix Explanation
-----------------------------------------------------------
â€¢	Uses bind_param("i", $_GET['id']) to enforce integer input.
â€¢	Escapes output using htmlspecialchars().
-----------------------------------------------------------
Contact Form SQL Injection (POST-Based Injection)
-----------------------------------------------------------
Vulnerable Code (PHP + MySQL)
-----------------------------------------------------------
<?php
$name = $_POST['name'];
$email = $_POST['email'];
$message = $_POST['message'];

$query = "INSERT INTO contacts (name, email, message) VALUES ('$name', '$email', '$message')";
mysqli_query($conn, $query);
?>
-----------------------------------------------------------
Why is it wrong?
-----------------------------------------------------------
â€¢	Attacker submits:
â€¢	name=John Doe
â€¢	email=attacker@example.com
â€¢	message=Nice service!'); DROP TABLE contacts; --
o	Query becomes:
o	INSERT INTO contacts (name, email, message) VALUES ('John Doe', 'attacker@example.com', 'Nice service!'); DROP TABLE contacts; --')
o	Deletes the contacts table.
-----------------------------------------------------------
Fixed Code (Using Prepared Statements)
-----------------------------------------------------------
<?php
$stmt = $conn->prepare("INSERT INTO contacts (name, email, message) VALUES (?, ?, ?)");
$stmt->bind_param("sss", $_POST['name'], $_POST['email'], $_POST['message']);
$stmt->execute();
?>
-----------------------------------------------------------
Fix Explanation
-----------------------------------------------------------
â€¢	Uses bind_param("sss", ...) to ensure proper escaping.
â€¢	Prevents attackers from executing multiple queries.
-----------------------------------------------------------
Mitigations
-----------------------------------------------------------
1.	Always use prepared statements or ORMs to prevent SQL injection.
2.	Never trust user input; always sanitize and validate.
3.	Escape output using htmlspecialchars() to prevent HTML injection.
4.	Use proper HTTP methods (e.g., POST for sensitive actions).
5.	Restrict database permissions to minimize damage from an attack.
Would you like me to generate SQL Injection payloads for testing? ðŸš€

